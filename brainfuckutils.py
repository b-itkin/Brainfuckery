#!/usr/bin/python3
#Author: Brady Itkin
#Date created: 2/19/2016
#Last modified 2/21/2016
#Part of a simple brainfuck compiler program
#Initial research for this code done on www.en.wikipedia.org/wiki/Brainfuck
#########################
from string import Template
import sys

#Compile return codes
SUCCESS=0
MISMATCH_BRACKET=1
PROGRAMSIZE=2

#Interpreter behavior
########################
#Cell sizes:
MAXVAL_CHAR=0 #-128 to 127
MAXVAL_UCHAR=1 #0 to 255
MAXVAL_INT=2 #-sys.maxsize to sys.maxsize

#output C header
header=Template("""#include <stdio.h>
#include <stdlib.h>
#define TAPESIZE $tapesz
/*Object file generated by the BFtoC compiler*/

int main(void) {
char * tape=malloc(sizeof(char)*TAPESIZE);
char * pointer=tape;

""")

footer="""free(tape);
return 0;
}
"""
class BracketStack:
	program=""
	bracket_level=0
		
	def __init__(self,program_=None):
		self.program=program_	
	def push(self):
		self.bracket_level+=1
	def pop(self):
		self.bracket_level-=1
	def checkBrackets(self):
		for c in self.program:
			if c is '[':
				self.push()
			elif c is ']':
				self.pop()
		if self.bracket_level is not 0:
			return 1
		else:
			return 0

class BrainFuckInterpreter:
	maxvaluemode=MAXVAL_INT
	tapesize=0
	tape=None
	tape_index=0
	
	def __init__(self,maxval,tapesz):
		maxvaluemode=maxval
		tapesize=tapesz

	 
class BrainFuckParser:
	program=""
	maxvalue=0
	maxprogramsize=0
	tapesize=0
	commandDict={">":"++pointer;\n", "<":"--pointer;\n", "+":"++*pointer;\n", "-":"--*pointer;\n", \
		".":"putchar(*pointer);\n", ",":"*pointer=getchar();\n", "[":"while (*pointer) {\n", "]":"}"} 
	return_code=0
	def __init__(self,program_,maxprogamsize_,tapesize_):
		self.program=program_
		#maxvalue=maxvalue_
		#self.maxprogramsize=maxprogramsize_
		self.tapesize=tapesize_
	def checkProgramSize(self):
		#TODO
		return 0		
	def checkBrackets(self):
		bracketChecker=BracketStack(self.program)
		if not bracketChecker.checkBrackets():
			return 0
		else:
			return 1

	def substitute(self,command):
		if (command in self.commandDict):
			return self.commandDict[command]
		else:
			return None
	def generateHeader(self):
		return header.substitute(tapesz=self.tapesize)	
	def compileProgram(self):
		returnTuple=None
		compiledCProg=None
		token=""
		if (self.checkProgramSize()):
			returnTuple=(PROGRAMSIZE,None)
			return returnTuple
		elif (self.checkBrackets()):
			returnTuple=(MISMATCH_BRACKET,None)
			return returnTuple
		compiledCProg=self.generateHeader()
		for c in self.program:
			token=self.substitute(c)
			if (token is not None):
				compiledCProg=compiledCProg+token
		
		compiledCProg=compiledCProg+footer
		returnTuple=(0,compiledCProg)
		return returnTuple
		
